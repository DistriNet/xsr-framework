package TestFunctionality.Tests;

import Factories.Browsers.Selenium.SeleniumBrowser;
import Factories.Browsers.Terminal.TerminalBrowser;
import TestFunctionality.Tests.IndividualTests.MaliciousPdfUpload;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public enum TestName {
    STATIC ("static", StaticTest.getInstance()),
    APPCACHE ("appcache", AppCacheTest.getInstance()),
    HEADERLINK ("header-link", HeaderLinkTest.getInstance()),
    HEADERCSP ("header-csp", HeaderCSPTest.getInstance()),
    PDF ("pdf", PdfTest.getInstance()),
    //INTERACTIVE ("interactive"),
    REDIRECT ("redirect", RedirectTest.getInstance()),
    SW ("sw", SWTest.getInstance()),
    SWFF ("sw-ff", SWFFTest.getInstance()),
    SCRIPT ("script", ScriptTest.getInstance()),
    NESTED_SCRIPT ("nested-script", NestedScriptTest.getInstance()),
    NESTED_CSS ("nested-css", NestedCSSTest.getInstance()),
    MALICIOUS_PDF_UPLOAD("malicious-pdf-upload", MaliciousPdfUpload.getInstance());

    public String name;
    private LeakTest test;

    TestName(String name, LeakTest test) {
        this.name = name;
        this.test = test;
    }

    public String initiatingUrl(String initiatingDomain) {
        return initiatingDomain + "/" + name;
    }

    public List<String> initiatingFileUrl(String initiatingDomain) {
        List<String> urls = new ArrayList<>();
        String initiatingUrl = initiatingUrl(initiatingDomain) + '/';
        switch(name) {
            case "pdf":
                urls.add(initiatingUrl);
            case "static":
            case "interactive":
            case "sw":
            case "sw-ff":
            case "script":
            case "appcache":
                urls.add(initiatingUrl + "index.html");
                return urls;
            case "redirect":
                urls.add(initiatingUrl + "file.html");
                urls.add(initiatingUrl + "file2.html");
                return urls;
            // Headers cannot be tested for file:// because these are generated by the web server
            default:
                throw new IllegalArgumentException("Given '" + name + "' is not a valid test type");
        }
    }

    public void setString(String newString) {
        this.name = newString;
    }

    public boolean run(SeleniumBrowser browser, int scenarioId) {
        if (!browser.isActive())
            throw new IllegalArgumentException("The given browser '" + browser + "' is not active");
        //String url = (scenarioId != 5) ? this.initiatingUrl(LeakTest.getUrl(scenarioId, this)) : this.initiatingFileUrl(LeakTest.getUrl(scenarioId, this)).get(0);
        browser.wait(1000);
        return test.run(browser, scenarioId);
    }

    public boolean run(TerminalBrowser browser, int scenarioId) {
        String url = (scenarioId != 5) ? this.initiatingUrl(LeakTest.getUrl(scenarioId, this)) : this.initiatingFileUrl(LeakTest.getUrl(scenarioId, this)).get(0);
        browser.wait(1000);
        return test.run(browser, scenarioId);
    }

    public static Collection<TestName> getAllTests() {
        ArrayList<TestName> tests = new ArrayList<>();
        tests.add(APPCACHE);
        tests.add(HEADERLINK);
        tests.add(HEADERCSP);
        tests.add(PDF);
        tests.add(REDIRECT);
        tests.add(SCRIPT);
        tests.add(STATIC);
        tests.add(SW);
        return tests;
    }

    @Override
    public String toString() {
        return name;
    }
}